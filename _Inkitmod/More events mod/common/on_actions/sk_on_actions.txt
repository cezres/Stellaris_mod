# Triggers country_event for the attacker upon victory
# This = country, leader attacker
# From = country, planet owner
# FromFrom = planet
on_planet_attackers_win = {
	events = {
	}
}

# Triggers country_event for the attacker upon defeat
# This = country, attack leader
# From = country, planet owner
# FromFrom = planet
on_planet_attackers_lose = {
	events = {
	}
}


# Triggers country_event for the defender upon victory
# This = country, planet owner
# From = country, attack leader
# FromFrom = planet
on_planet_defenders_win = {
	events = {
	}
}

# Triggers country_event for the defender upon defeat
# This = country, planet owner
# From = country, attack leader
# FromFrom = planet
on_planet_defenders_lose = {
	events = {
		
	}
}

on_colonization_started = {
	events = {
	}
}

# A planet has been colonized.
# Scope = Planet
on_colonized = {
	events = {
		
	}
}

# This = owner of fleet 1
# From = owner of fleet 2
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_entering_battle = {
	events = {
	}
}

# This = owner of fleet 1 (destroyed)
# From = owner of fleet 2 (combatant)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_fleet_destroyed_victim = {
	events = {
	}
}

# This = owner of fleet 1 (combatant)
# From = owner of fleet 2 (destroyed)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_fleet_destroyed_perp = {
	events = {
	}
#	random_events = {
#		300 = 0
#	}
}

# This = country
# From = opponent war leader
on_entering_war = {
	events = {
	}
}

# Full Orbital Bombardment commenced
# This = Country scope
# From = Planet
on_full_orbital_bombardment = {
	events = {
	}
}

# A war has ended
# Root = Loser
# From = Main Winner
on_war_ended = {
	events = {
	}
}

# Root = Planet being bombarded for a day.
# From = Fleet performing the delicate bombardment.
on_daily_bombardment = {
	events = {
	}
}

# A planets controller becomes a country not the same as the owner.
# Root = Planet
# From = Planet Owner
# FromFrom = Planet Controller (the one occupying)
on_planet_occupied = {
	events = {
		
	}
}

# A planet is being bombarded, CAN USE IN PLANET LIMIT orbital_bombardment = limited, orbital_bombardment = full, orbital_bombardment = soft
# This = planet under bombardment
# From = bombarding empire
on_monthly_orbital_bombardment = {
	events = {
		
	}
}

# Triggers when a Special Project to uplift a pre-sentient species is completed
# Scope = planet_event
# This = planet scope
# From = uplifted species
on_uplift_completion = {
	events = {
		
	}
}

# This = Pop scope
# From = Planet
on_purge_begun = {
	events = {
		
	}
}
